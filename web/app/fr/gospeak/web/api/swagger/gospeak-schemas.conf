# https://spec.openapis.org/oas/v3.0.2#data-types
# https://spec.openapis.org/oas/v3.0.2#schema-object

#
# Domain schemas
#

UserSlug {type: string, example: "demo", description: "It should be unique among all users"}
UserPublic { # ApiUser.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/UserSlug"}
    firstName {type: string}
    lastName {type: string}
    avatar {"$ref": "#/components/schemas/Avatar"}
    bio {"$ref": "#/components/schemas/Markdown"}
    website {"$ref": "#/components/schemas/Url"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, firstName, lastName, avatar, social]
}

GroupSlug {type: string, example: "ht-paris", description: "It should be unique among all groups"}
GroupName {type: string, example: "HumanTalks Paris"}
GroupEmbed { # ApiGroup.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/GroupSlug"}
    name {"$ref": "#/components/schemas/GroupName"}
    contact {"$ref": "#/components/schemas/Email"}
    description {"$ref": "#/components/schemas/Markdown"}
    location {"$ref": "#/components/schemas/Place"}
    tags {"$ref": "#/components/schemas/Tags"}
  }
  required: [slug, name, description, tags]
}

CfpSlug {type: string, example: "ht-paris", description: "It should be unique among all CFPs"}
CfpName {type: string, example: "HumanTalks Paris"}
CfpPublic { # ApiCfp.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/CfpSlug"}
    name {"$ref": "#/components/schemas/CfpName"}
    begin {"$ref": "#/components/schemas/LocalDateTime"}
    close {"$ref": "#/components/schemas/LocalDateTime"}
    description {"$ref": "#/components/schemas/Markdown"}
    tags {"$ref": "#/components/schemas/Tags"}
    group {"$ref": "#/components/schemas/GroupEmbed"}
  }
  required: [slug, name, description, tags]
}


#
# Utils schemas
#

Place { # ApiPlace
  type: object
  properties {
    name {type: string, example: "Gospeak"}
    address {type: string, example: "156 Boulevard Haussmann, 75008 Paris"}
    locality {type: string, example: "Paris"}
    country {type: string, example: "France"}
    url {type: string, format: url, example: "https://maps.google.com/?cid=3360768160548514744"}
    geo {"$ref": "#/components/schemas/Geo"}
  }
  required: [name, address, country, url, geo]
}
Geo { # ApiGeo
  type: object
  properties {
    lat {type: number, format: double, example: 48.8716827}
    lon {type: number, format: double, example: 2.307039}
  }
  required: [lat, lon]
}
Social { # ApiSocial
  type: object
  properties {
    facebook {"$ref": "#/components/schemas/SocialAccount"}
    instagram {"$ref": "#/components/schemas/SocialAccount"}
    twitter {"$ref": "#/components/schemas/SocialAccount"}
    linkedIn {"$ref": "#/components/schemas/SocialAccount"}
    youtube {"$ref": "#/components/schemas/SocialAccount"}
    meetup {"$ref": "#/components/schemas/SocialAccount"}
    eventbrite {"$ref": "#/components/schemas/SocialAccount"}
    slack {"$ref": "#/components/schemas/SocialAccount"}
    discord {"$ref": "#/components/schemas/SocialAccount"}
    github {"$ref": "#/components/schemas/SocialAccount"}
  }
}
SocialAccount { # ApiSocial.Account
  type: object
  properties {
    url {type: string, format: url, example: "https://twitter.com/GospeakApp", description: "Url of the social account"}
    handle {type: string, example: "@GospeakApp", description: "Short text identifying the account"}
  }
}
Tags {type: array, items {type: string}, example: ["Tech", "Scala", "Public speaking"]} # Tag
Markdown {type: string, format: markdown, example: "A **markdown** text..."} # Markdown
Email {type: string, format: email, example: "paris@humantalks.com"} # EmailAddress
Url {type: string, format: url, example: "https://gospeak.io/speakers/loicknuchel"} # Url
Avatar {type: string, format: url, example: "https://secure.gravatar.com/avatar/f755e6e8914df5cbaa74d30dd7de1ae2"} # Avatar
Instant {type: string, format: date-time} # Instant
LocalDateTime {type: string, format: local-date-time, example: "2019-12-10T19:00:00"} # LocalDateTime
PageNo {type: integer, format: int32, minimum: 1, example: 1, description: "Page index"} # Page.No
PageSize {type: integer, format: int32, minimum: 0, example: 20, description: "Number of items in pages"} # Page.Size
PageSort {type: string} # Page.OrderBy
PageSearch {type: string} # Page.Search


#
# Generic response schemas
#

ResponseItem { # ItemResponse
  type: object
  properties {
    data {type: object, description: "Response payload"}
    execMs {"$ref": "#/components/schemas/ResponseExecTime"}
  }
  required: [data, execMs]
}
ResponsePage { # PageResponse
  type: object
  properties {
    data {type: array, description: "Items of the page"}
    totalItems {type: integer, format: int64, minimum: 0, example: 42, description: "Total number of items (in all pages)"}
    pageSize {"$ref": "#/components/schemas/PageSize"}
    pageNo {"$ref": "#/components/schemas/PageNo"}
    execMs {"$ref": "#/components/schemas/ResponseExecTime"}
  }
  required: [data, totalItems, pageSize, pageNo, execMs]
}
ResponseError { # ErrorResponse
  type: object
  properties {
    status {type: integer, format: int32, example: 404, description: "HTTP status code"}
    message {type: string, example: "Oups, something went wrong", description: "User friendly message for the error, can be multiline"}
    execMs {"$ref": "#/components/schemas/ResponseExecTime"}
  }
  required: [status, message, execMs]
}
ResponseExecTime {type: integer, format: int64, minimum: 0, example: 6, description: "Server side time in millis to execute the request"}
