# https://spec.openapis.org/oas/v3.0.2#data-types
# https://spec.openapis.org/oas/v3.0.2#schema-object

#
# Domain schemas
#

UserSlug {type: string, example: "demo", description: "It should be unique among all users"}
UserFirstName {type: string, example: "Lo√Øc"}
UserLasName {type: string, example: "Knuchel"}
UserPublic { # ApiUser.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/UserSlug"}
    firstName {"$ref": "#/components/schemas/UserFirstName"}
    lastName {"$ref": "#/components/schemas/UserLasName"}
    avatar {"$ref": "#/components/schemas/Avatar"}
    bio {"$ref": "#/components/schemas/Markdown"}
    website {"$ref": "#/components/schemas/Website"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, firstName, lastName, avatar, social]
}
UserEmbed { # ApiUser.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/UserSlug"}
    firstName {"$ref": "#/components/schemas/UserFirstName"}
    lastName {"$ref": "#/components/schemas/UserLasName"}
    avatar {"$ref": "#/components/schemas/Avatar"}
    bio {"$ref": "#/components/schemas/Markdown"}
    website {"$ref": "#/components/schemas/Website"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, firstName, lastName, avatar, social]
}

GroupSlug {type: string, example: "ht-paris", description: "It should be unique among all groups"}
GroupName {type: string, example: "HumanTalks Paris"}
GroupPublic { # ApiGroup.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/GroupSlug"}
    name {"$ref": "#/components/schemas/GroupName"}
    contact {"$ref": "#/components/schemas/Email"}
    description {"$ref": "#/components/schemas/Markdown"}
    location {"$ref": "#/components/schemas/Place"}
    tags {"$ref": "#/components/schemas/Tags"}
    created {"$ref": "#/components/schemas/Instant"}
  }
  required: [slug, name, description, tags, created]
}
GroupEmbed { # ApiGroup.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/GroupSlug"}
    name {"$ref": "#/components/schemas/GroupName"}
    contact {"$ref": "#/components/schemas/Email"}
    description {"$ref": "#/components/schemas/Markdown"}
    location {"$ref": "#/components/schemas/Place"}
    tags {"$ref": "#/components/schemas/Tags"}
  }
  required: [slug, name, description, tags]
}

CfpSlug {type: string, example: "ht-paris", description: "It should be unique among all CFPs"}
CfpName {type: string, example: "HumanTalks Paris"}
CfpPublic { # ApiCfp.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/CfpSlug"}
    name {"$ref": "#/components/schemas/CfpName"}
    begin {"$ref": "#/components/schemas/LocalDateTime"}
    close {"$ref": "#/components/schemas/LocalDateTime"}
    description {"$ref": "#/components/schemas/Markdown"}
    tags {"$ref": "#/components/schemas/Tags"}
    group {"$ref": "#/components/schemas/GroupEmbed"}
  }
  required: [slug, name, description, tags]
}

EventSlug {type: string, example: "2019-12", description: "It should be unique among all CFPs"}
EventName {type: string, example: "HumanTalks Paris Decembre 2019"}
EventPublic { # ApiEvent.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/EventSlug"}
    name {"$ref": "#/components/schemas/EventName"}
    start {"$ref": "#/components/schemas/LocalDateTime"}
    venue {"$ref": "#/components/schemas/VenueEmbed"}
    proposals {type: array, items {"$ref": "#/components/schemas/ProposalEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
    meetup {"$ref": "#/components/schemas/MeetupLink"}
  }
  required: [slug, name, start, proposals, tags]
}
EventEmbed { # ApiEvent.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/EventSlug"}
    name {"$ref": "#/components/schemas/EventName"}
    start {"$ref": "#/components/schemas/LocalDateTime"}
    meetup {"$ref": "#/components/schemas/MeetupLink"}
  }
  required: [slug, name, start]
}

ProposalId {type: string, format: uuid, example: "b44f0bd0-412e-4fd6-a904-d1899439b018"}
ProposalTitle {type: string, example: "Event sourcing par l'exemple"}
ProposalPublic { # ApiProposal.Published
  type: object
  properties {
    id {"$ref": "#/components/schemas/ProposalId"}
    title {"$ref": "#/components/schemas/ProposalTitle"}
    description {"$ref": "#/components/schemas/Markdown"}
    duration {"$ref": "#/components/schemas/FiniteDuration"}
    slides {"$ref": "#/components/schemas/Slides"}
    video {"$ref": "#/components/schemas/Video"}
    speakers {type: array, items {"$ref": "#/components/schemas/UserEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
    event {"$ref": "#/components/schemas/EventEmbed"}
    venue {"$ref": "#/components/schemas/VenueEmbed"}
  }
  required: [id, title, description, duration, speakers, tags]
}
ProposalEmbed { # ApiProposal.Embed
  type: object
  properties {
    id {"$ref": "#/components/schemas/ProposalId"}
    title {"$ref": "#/components/schemas/ProposalTitle"}
    description {"$ref": "#/components/schemas/Markdown"}
    duration {"$ref": "#/components/schemas/FiniteDuration"}
    slides {"$ref": "#/components/schemas/Slides"}
    video {"$ref": "#/components/schemas/Video"}
    speakers {type: array, items {"$ref": "#/components/schemas/UserEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
  }
  required: [id, title, description, duration, speakers, tags]
}

PartnerSlug {type: string, example: "gospeak", description: "It should be unique for a group"}
PartnerName {type: string, example: "Gospeak"}
PartnerEmbed { # ApiPartner.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/PartnerSlug"}
    name {"$ref": "#/components/schemas/PartnerName"}
    logo {"$ref": "#/components/schemas/Logo"}
    description {"$ref": "#/components/schemas/Markdown"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, name, logo, social]
}

VenueEmbed { # ApiVenue.Embed
  type: object
  properties {
    address {"$ref": "#/components/schemas/Place"}
    partner {"$ref": "#/components/schemas/PartnerEmbed"}
  }
  required: [address, partner]
}


#
# Utils schemas
#

Place { # ApiPlace
  type: object
  properties {
    name {type: string, example: "Gospeak"}
    address {type: string, example: "156 Boulevard Haussmann, 75008 Paris"}
    locality {type: string, example: "Paris"}
    country {type: string, example: "France"}
    url {type: string, format: url, example: "https://maps.google.com/?cid=3360768160548514744"}
    geo {"$ref": "#/components/schemas/Geo"}
  }
  required: [name, address, country, url, geo]
}
Geo { # ApiGeo
  type: object
  properties {
    lat {type: number, format: double, example: 48.8716827}
    lon {type: number, format: double, example: 2.307039}
  }
  required: [lat, lon]
}
Social { # ApiSocial
  type: object
  properties {
    facebook {"$ref": "#/components/schemas/SocialAccount"}
    instagram {"$ref": "#/components/schemas/SocialAccount"}
    twitter {"$ref": "#/components/schemas/SocialAccount"}
    linkedIn {"$ref": "#/components/schemas/SocialAccount"}
    youtube {"$ref": "#/components/schemas/SocialAccount"}
    meetup {"$ref": "#/components/schemas/SocialAccount"}
    eventbrite {"$ref": "#/components/schemas/SocialAccount"}
    slack {"$ref": "#/components/schemas/SocialAccount"}
    discord {"$ref": "#/components/schemas/SocialAccount"}
    github {"$ref": "#/components/schemas/SocialAccount"}
  }
}
SocialAccount { # ApiSocial.Account
  type: object
  properties {
    url {type: string, format: url, example: "https://twitter.com/GospeakApp", description: "Url of the social account"}
    handle {type: string, example: "@GospeakApp", description: "Short text identifying the account"}
  }
}
Tags {type: array, items {type: string}, example: ["Tech", "Scala", "Public speaking"]} # Tag
Markdown {type: string, format: markdown, example: "A **markdown** text..."} # Markdown
Email {type: string, format: email, example: "paris@humantalks.com"} # EmailAddress
Website {type: string, format: url, example: "https://gospeak.io/speakers/loicknuchel"} # Url
Logo {type: string, format: url, example: "https://res.cloudinary.com/gospeak/image/upload/gospeak/logo-text.svg"} # Logo
Avatar {type: string, format: url, example: "https://secure.gravatar.com/avatar/f755e6e8914df5cbaa74d30dd7de1ae2"} # Avatar
Slides {type: string, format: url, example: "https://www.slideshare.net/loicknuchel/scala-bad-practices-scalaio-2019"} # Slides
Video {type: string, format: url, example: "https://www.youtube.com/watch?v=l0c4oR4JPr4"} # Video
MeetupLink {type: string, example: "https://www.meetup.com/HumanTalks-Paris/events/266227725", description: "Link to Meetup event"} # Event.ExtRefs
Instant {type: string, format: date-time} # Instant
LocalDateTime {type: string, format: local-date-time, example: "2019-12-10T19:00:00"} # LocalDateTime
FiniteDuration {type: integer, format: int32, example: 10, description: "Duration in minutes"} # FiniteDuration
PageNo {type: integer, format: int32, minimum: 1, example: 1, description: "Page index"} # Page.No
PageSize {type: integer, format: int32, minimum: 0, example: 20, description: "Number of items in pages"} # Page.Size
PageSort {type: string} # Page.OrderBy
PageSearch {type: string} # Page.Search

ResponseExecTime {type: integer, format: int64, minimum: 0, example: 6, description: "Server side time in millis to execute the request"}
